version: '3.8'

services:
  # TimescaleDB - Base de datos optimizada para time-series
  timescaledb:
    image: timescale/timescaledb:latest-pg16
    container_name: analytics_timescaledb
    environment:
      POSTGRES_DB: analytics_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
      POSTGRES_HOST_AUTH_METHOD: trust
      # TimescaleDB specific settings
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --data-checksums"
    ports:
      - "5432:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d analytics_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - analytics_network

  # Redis - Cache y message broker
  redis:
    image: redis:7-alpine
    container_name: analytics_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - analytics_network

  # FastAPI - Nuestra API principal
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: analytics_api
    environment:
      # Database settings
      DATABASE_URL: postgresql://postgres:postgres_password@timescaledb:5432/analytics_db
      REDIS_URL: redis://redis:6379/0
      
      # App settings
      ENVIRONMENT: development
      DEBUG: "true"
      LOG_LEVEL: info
      API_V1_STR: /api/v1
      
      # Security
      SECRET_KEY: your-secret-key-change-in-production
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # CORS settings
      BACKEND_CORS_ORIGINS: '["http://localhost:3000","http://localhost:8080","http://localhost:8000"]'
    ports:
      - "8000:8000"
    volumes:
      # Bind mount para hot-reload en desarrollo
      - ./app:/app
      - ./requirements.txt:/requirements.txt
    depends_on:
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - analytics_network

  # Jupyter Notebook - Para análisis y exploración
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    container_name: analytics_jupyter
    environment:
      DATABASE_URL: postgresql://postgres:postgres_password@timescaledb:5432/analytics_db
      REDIS_URL: redis://redis:6379/0
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./app:/home/jovyan/app
    depends_on:
      timescaledb:
        condition: service_healthy
    networks:
      - analytics_network

  # Adminer - Interface gráfica para la base de datos
  adminer:
    image: adminer:latest
    container_name: analytics_adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: timescaledb
      ADMINER_DESIGN: lucas
    depends_on:
      - timescaledb
    networks:
      - analytics_network

  # Grafana - Dashboard de métricas (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: analytics_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - timescaledb
    networks:
      - analytics_network

volumes:
  timescale_data:
    driver: local
  redis_data:
    driver: local  
  grafana_data:
    driver: local

networks:
  analytics_network:
    driver: bridge